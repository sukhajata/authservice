// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sukhajata/authservice/internal/keycloak (interfaces: Client)

// Package mocks is a generated GoMock package.
package mocks

import (
	rsa "crypto/rsa"
	gomock "github.com/golang/mock/gomock"
	keycloak "github.com/sukhajata/authservice/internal/keycloak"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AddRoleToKeycloakUser mocks base method
func (m *MockClient) AddRoleToKeycloakUser(arg0, arg1 string, arg2 keycloak.Role, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRoleToKeycloakUser", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRoleToKeycloakUser indicates an expected call of AddRoleToKeycloakUser
func (mr *MockClientMockRecorder) AddRoleToKeycloakUser(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoleToKeycloakUser", reflect.TypeOf((*MockClient)(nil).AddRoleToKeycloakUser), arg0, arg1, arg2, arg3)
}

// CreateKeycloakUser mocks base method
func (m *MockClient) CreateKeycloakUser(arg0, arg1, arg2, arg3, arg4 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeycloakUser", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeycloakUser indicates an expected call of CreateKeycloakUser
func (mr *MockClientMockRecorder) CreateKeycloakUser(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeycloakUser", reflect.TypeOf((*MockClient)(nil).CreateKeycloakUser), arg0, arg1, arg2, arg3, arg4)
}

// DeleteKeycloakUser mocks base method
func (m *MockClient) DeleteKeycloakUser(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeycloakUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKeycloakUser indicates an expected call of DeleteKeycloakUser
func (mr *MockClientMockRecorder) DeleteKeycloakUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeycloakUser", reflect.TypeOf((*MockClient)(nil).DeleteKeycloakUser), arg0, arg1)
}

// GetKeycloakToken mocks base method
func (m *MockClient) GetKeycloakToken(arg0, arg1, arg2, arg3 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeycloakToken", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeycloakToken indicates an expected call of GetKeycloakToken
func (mr *MockClientMockRecorder) GetKeycloakToken(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeycloakToken", reflect.TypeOf((*MockClient)(nil).GetKeycloakToken), arg0, arg1, arg2, arg3)
}

// GetKeycloakUserID mocks base method
func (m *MockClient) GetKeycloakUserID(arg0, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeycloakUserID", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeycloakUserID indicates an expected call of GetKeycloakUserID
func (mr *MockClientMockRecorder) GetKeycloakUserID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeycloakUserID", reflect.TypeOf((*MockClient)(nil).GetKeycloakUserID), arg0, arg1, arg2)
}

// GetPublicKey mocks base method
func (m *MockClient) GetPublicKey(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKey", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKey indicates an expected call of GetPublicKey
func (mr *MockClientMockRecorder) GetPublicKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockClient)(nil).GetPublicKey), arg0)
}

// GetRoleID mocks base method
func (m *MockClient) GetRoleID(arg0, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleID", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleID indicates an expected call of GetRoleID
func (mr *MockClientMockRecorder) GetRoleID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleID", reflect.TypeOf((*MockClient)(nil).GetRoleID), arg0, arg1, arg2)
}

// GetVerifyKey mocks base method
func (m *MockClient) GetVerifyKey(arg0, arg1 string) (*rsa.PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerifyKey", arg0, arg1)
	ret0, _ := ret[0].(*rsa.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerifyKey indicates an expected call of GetVerifyKey
func (mr *MockClientMockRecorder) GetVerifyKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerifyKey", reflect.TypeOf((*MockClient)(nil).GetVerifyKey), arg0, arg1)
}
